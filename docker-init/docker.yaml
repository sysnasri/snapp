---
- name: Installing docker and its packages.
  hosts: "{{Target_Host}}"
  vars_files: vars.yaml
 #environment:
   #http_proxy: "http://{{proxy.username}}:{{proxy.password}}@{{proxy.server}}:{{proxy.port}}"     
   #https_proxy: "http://{{proxy.username}}:{{proxy.password}}@{{proxy.server}}:{{proxy.port}}"
  environment:
   http_proxy: "http://178.22.121.13:8080" 
   https_proxy: "http://178.22.121.13:8080"
  tasks:

     - name: Setting proper nameservers 
       blockinfile:
         block: |
           nameserver "{{nameserver.ns1}}"
           nameserver "{{nameserver.ns2}}"
         insertafter: EOF
         path: /etc/resolv.conf

     - name: Installing necessary packages. 
       package:
         update_cache: true
         name: "{{item}}"
         state: present
       loop: "{{docker_packages.ubuntu}}"
       when: ansible_distribution == "Ubuntu"
     - name: Add Docker GPG apt Key 
       apt_key:
            url: https://download.docker.com/linux/ubuntu/gpg
            state: present
     - name: Set http proxy for APT 
       template:
          src: apt.proxy
          dest: /etc/apt/apt.conf.d/proxy.conf

     - name: Adding Docker Repository
       apt_repository:
              repo: deb https://download.docker.com/linux/ubuntu {{ansible_distribution_release}} stable
              state: present
     - name: Updating apt and installing docker-ce
       package: 
          update_cache: true 
          name: docker-ce 
          state: latest

          ######## Set HTTP Proxy for Docker systemd service in vars.yaml ###########
     - name: Setting docker systemd proxy
       file:
           name: /etc/systemd/system/docker.service.d 
           state: directory
     - template:
             src: docker.proxy
             dest: /etc/systemd/system/docker.service.d/http-proxy.conf  
       notify:
           - docker_restart
           - daemon_reload
     - name: Enabling docker service to run at boot time
       service:
         name: docker
         enabled: true 
         state: started     
     - meta: flush_handlers
     - name: Checking if docker-compose is already installed 
       stat: 
         path: /usr/local/bin/docker-compose
       register: docpos

     - name: Installing Docker Compose
       shell: 
         cmd: curl -L "https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose && chmod +x  /usr/local/bin/docker-compose

       when: docpos.stat.exists == false  


     - name: Installing Docker Module for Python
       pip:
            name: "{{item}}" 
            state: latest
       loop: "{{pip_modules}}"
       notify:
        - docker_restart
     - meta: flush_handlers

 ################### Set your Docker hub credentials in vars.yaml #########################    
     - name: login to dockerhub
       docker_login:
          username: "{{docker.username}}"
          password: "{{docker.password}}"       
     - name: Pulling default Docker image
       docker_image:
            name: "{{ item }}"
            source: pull
       loop: "{{images_name}}"
     - name: create group name
       group:
        name: haproxy
        system: yes

     - name: creating haproxy user  
       user: 
        name: haproxy
        shell: /bin/false
        group: haproxy
        system: yes


     - name: Create harpxoy directory for /haproxy/haproxy.conf
       file:
          name:   /haproxy/
          owner: root
          group: root
          mode: 755
          state: directory
          recurse: yes  
          
  handlers:
   - name: docker_restart
     service:
        name: docker
        state: restarted
   - name: daemon_reload
     systemd:
       daemon_reload: true    

